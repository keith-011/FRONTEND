import React, { useEffect, useState } from "react";
import { useFormContext } from "react-hook-form";

import FormCategory from "../../FormCategory";
import FormInput from "../../../../../Shared/components/ui/layout/FormInput";
import { NewSchemaAddEmployeeType } from "../../../../schema/AddEmployee";

interface Props {
  activeCategory: number | null;
  handleCategoryClick: (id: number) => void;
}

const AccountInformation: React.FC<Props> = ({
  activeCategory,
  handleCategoryClick,
}) => {
  const {
    register,
    watch,
    trigger,
    getValues,
    setValue,
    formState: { errors },
  } = useFormContext<NewSchemaAddEmployeeType>();

  const [isAutoGenerated, setAutoGeneration] = useState<boolean>(
    getValues("autoGenerate"),
  );
  const [isFieldError, setFieldError] = useState<boolean>(false);

  const watchAutoGenerate = watch("autoGenerate");

  const inputFields = [
    errors.employeeNumberCityHall,
    errors.employeeNumberPCC,
    errors.email,
    errors.password,
    errors.confirm_password,
  ];

  useEffect(() => {
    setFieldError(inputFields.some((item) => item !== undefined));
  }, [inputFields]);

  useEffect(() => {
    setAutoGeneration(watchAutoGenerate);
    trigger("employeeNumberPCC");
    if (watchAutoGenerate) {
      setValue("employeeNumberPCC", "");
    }
  }, [watchAutoGenerate]);

  return (
    <>
      <FormCategory
        id={1}
        text="Account Information"
        isFieldError={isFieldError}
        activeCategory={activeCategory}
        handleCategoryClick={handleCategoryClick}
      >
        <FormInput
          labelText="Employee Number (City Hall)"
          requiredAsterisk={true}
          errorMessage={errors.employeeNumberCityHall?.message}
        >
          <input
            type="text"
            maxLength={50}
            placeholder="Employee Number"
            className="modal-input"
            {...register("employeeNumberCityHall")}
          />
        </FormInput>

        <FormInput
          labelText="Employee Number (PCC)"
          requiredAsterisk={true}
          errorMessage={errors.employeeNumberPCC?.message}
        >
          <input
            type="text"
            maxLength={50}
            placeholder="Employee Number"
            disabled={isAutoGenerated}
            className="modal-input disabled:bg-accent-100"
            {...register("employeeNumberPCC")}
          />

          <label className="form-checkbox">
            <input type="checkbox" {...register("autoGenerate")} />
            <span>Auto Generate</span>
          </label>
        </FormInput>

        <FormInput
          labelText="Email"
          requiredAsterisk={true}
          errorMessage={errors.email?.message}
        >
          <input
            type="text"
            maxLength={50}
            placeholder="Email Address"
            className="modal-input"
            {...register("email")}
          />
        </FormInput>

        <FormInput
          labelText="Account Password"
          requiredAsterisk={true}
          errorMessage={errors.password?.message}
        >
          <input
            type="password"
            maxLength={50}
            placeholder="Password"
            className="modal-input"
            {...register("password")}
          />
        </FormInput>
        <FormInput
          labelText="Confirm Password"
          requiredAsterisk={true}
          errorMessage={errors.confirm_password?.message}
        >
          <input
            type="password"
            maxLength={50}
            placeholder="Confirm password"
            className="modal-input"
            {...register("confirm_password")}
          />
        </FormInput>
      </FormCategory>
    </>
  );
};

export default AccountInformation;
